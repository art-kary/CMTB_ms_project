debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~if_else(is.nan(.), NA, .))
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~if_else(is.nan(.), "NA", .))
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), "NA", .))
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), "NA", .))
periodRaw %>% filter(trial == 7)
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .))
periodRaw %>% filter(trial == 7)
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
periodRaw %>% filter(trial == 7)
Experiment <- 5
rawDir <- str_c("Exp ", Experiment, "Raw Data CSV")
rawDir <- str_c("Exp ", Experiment, " Raw Data CSV")
outFileName <- str_c("Exp_", Experiment, "_data.RData")
source('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
curFile <- subFiles[str_detect(subFiles,pattern=patternTypes[p])] #variable that detects files of the relevant period (dec,fb)
subFiles
curFile
curFile <- subFiles[str_detect(subFiles,pattern=patternTypes[p])] #variable that detects files of the relevant period (dec,fb)
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, .))
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, .)) # turn any remaining NAs into 0
startTimes <- periodRaw %>%
group_by(trial) %>%
summarise(startTime=min(time)) # this gets the time of the first sample in each period
periodFix <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
periodFix <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
detect.fixations(periodRaw)
blah <- detect.fixations(periodRaw)
detect.fixations(periodRaw) %>% view()
sessionInfo()
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
subset(detect.fixations(periodRaw), event=="fixation")
periodRaw
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
periodRaw
source('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
detect.fixations(periodRaw)
detect.fixations(periodRaw) %>% view()
periodRaw
View(periodRaw)
periodRaw2 <- filter(periodRaw, trial == 1)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial <72)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial <50)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial <3)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial <10)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial <5)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial <6)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial <7)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial <8)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial <9)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial ==28)
detect.fixations(periodRaw2) %>% view()
round(1.2)
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
detect.fixations(periodRaw)
subset(detect.fixations(periodRaw), event=="fixation")
source('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
debugSource('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
source('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
rm(list=ls())
library(tidyverse)
library(saccades)
library(zoo) # used for the na.spline function
Experiment <- 5
rawDir <- str_c("Exp ", Experiment, " Raw Data CSV")
patternTypes <- c("dec","fb") #variable that differentiates between the 2 different csv files for the different experimental periods
fnams <- list.files(rawDir, pattern = "dec", full.names = TRUE) # needed for reading data
allEGData <- NULL # empty array to fill with processed data from all participants' raw data
allResponseData <- NULL
s = 39
# creates variable to extract file name (counting backwards from file name characters to get participant number)
subNum <- substr(fnams[s], start = nchar(fnams[s])-12, stop = nchar(fnams[s])-4)
subFiles <- list.files(rawDir, pattern = subNum, full.names = TRUE) # needed for reading data
subData <- NULL
print(s)
print(subNum)
p = 1
print(p)
curFile <- subFiles[str_detect(subFiles,pattern=patternTypes[p])] #variable that detects files of the relevant period (dec,fb)
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, round(.))) # turn any remaining NAs into 0
startTimes <- periodRaw %>%
group_by(trial) %>%
summarise(startTime=min(time)) # this gets the time of the first sample in each period
periodFix <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
detect.fixations(periodRaw)
detect.fixations(periodRaw) %>% view()
periodRaw2 <- filter(periodRaw, trial <10)
detect.fixations(periodRaw2) %>% view()
periodRaw2 <- filter(periodRaw, trial <5)
detect.fixations(periodRaw2) %>% view()
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
detect.fixations(periodRaw) %>% view()
periodRaw <- periodRaw %>%
#mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
#mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.nan(.), 0, round(.))) # turn any remaining NAs into 0
detect.fixations(periodRaw) %>% view()
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.nan(.), 0, round(.))) # turn any remaining NAs into 0
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.nan(.), 0, round(.))) # turn any remaining NAs into 0
startTimes <- periodRaw %>%
group_by(trial) %>%
summarise(startTime=min(time)) # this gets the time of the first sample in each period
detect.fixations(periodRaw)
## ---- run_saccades_program
periodFix <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, round(.))) # turn any remaining NAs into 0
startTimes <- periodRaw %>%
group_by(trial) %>%
summarise(startTime=min(time)) # this gets the time of the first sample in each period
## ---- run_saccades_program
periodFix <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25)
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, round(.))) # turn any remaining NAs into 0
startTimes <- periodRaw %>%
group_by(trial) %>%
summarise(startTime=min(time)) # this gets the time of the first sample in each period
detect.fixations(periodRaw)
detect.fixations(periodRaw) %>% view()
periodRaw2 <- filter(periodRaw, trial == 46)
detect.fixations(periodRaw2) %>% view()
write_csv(periodRaw, "input.csv")
library(tidyverse)
library(saccades)
data <- read_csv("input.csv")
detect.fixations(data)
# this gives warnings
detect.fixations(data) %>% view()
detect.fixations(data_T48)
data_T48 <- filter(data, trial == 46)
detect.fixations(data_T48)
# this gives warnings about returning -Inf
# and all events are given as type NA
detect.fixations(data) %>% view()
# but then if a single trial with some data is selected
# we get some fixations (they are all very short, however)
data_T48 <- filter(data, trial == 46)
detect.fixations(data_T48) %>% view()
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
debugSource('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
View(periodFix)
View(periodRaw)
detect.fixations(periodRaw)
periodRaw2 = filter(periodRaw, trial == 1)
detect.fixations(periodRaw2)
periodRaw2 = filter(periodRaw, trial < 10)
detect.fixations(periodRaw2)
periodRaw2 = filter(periodRaw, trial ==3)
detect.fixations(periodRaw2)
subset(detect.fixations(periodRaw), event=="fixation")
subset(detect.fixations(periodRaw2), event=="fixation")
periodRaw2 = filter(periodRaw, trial %in% 2:3)
subset(detect.fixations(periodRaw2), event=="fixation")
detect.fixations(periodRaw2)
periodRaw2 = filter(periodRaw, trial ==2)
detect.fixations(periodRaw2)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
allEGdata[[1]]
allEGData[[1]]
allEGData[[1]] %>% view()
allEGData[[2]] %>% view()
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
allEGData[[2]] %>% view()
allEGData[[1]] %>% view()
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
debugSource('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
periodRaw
View(periodRaw)
periodRaw$trial[periodRaw$trial == 17]
periodRaw[periodRaw$trial == 17]
periodRaw[periodRaw$trial == 17,]
detect.fixations(periodRaw[periodRaw$trial == 17,])
periodRaw[periodRaw$x>0,]
periodRaw[periodRaw$x>0,] %>% view()
detect.fixations(periodRaw[periodRaw$trial == 24,])
periodRaw %>% count(x == 0)
periodRaw %>% count(y == 0)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
debugSource('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
## ---- run_saccades_program
periodFix <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
period <- rep(p,nrow = periodFix) # generates an array that matches same nr of rows as 'periodFix' and adds an extra 'period' column
subj <- rep(subNum,nrow = periodFix) # generates an array that matches same nr of rows as 'periodFix' and adds 'subject nr' column
periodFix <- cbind(subj,period,periodFix) # overwrites 'saccades' periodFix by combining existing periodFix with subject nr col and period col
View(periodFix)
debugSource('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
periodFix %>%
mutate(subj = subNum,
period = p)
## ---- run_saccades_program
periodFix <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
periodFix %>%
mutate(subj = subNum,
period = p)
periodFix %>%
mutate(subj = subNum,
period = p) %>% view()
periodFix %>%
mutate(subj = subNum,
period = p) %>%
select(subj,period,everything()) %>%
view()
periodFix %>%
mutate(subj = subNum,
period = p) %>%
select(subj,period,everything()) %>%
left_join(startTimes, by = "trial") %>% # add the startTimes column to periodFix
view()
periodFix %>%
mutate(subj = subNum,
period = p) %>%
left_join(startTimes, by = "trial") %>% # add the startTimes column to periodFix
view()
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades_Exp5.R', echo=TRUE)
## @knitr viewFixations
rm(list=ls())
library(tidyverse)
load("Exp_5_data.RData")
# Define AOIs
cueAOI = c(235,780,1685,1030)
respAOI = c(235,400,1685,650)
outAOI = c(235,50,1685,300)
checkXYinAOI <- function(x,y,AOI) { # passes the function 3 variables: x,y,and AOI
return(x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4]) #
}
#createAOIcol is name of function //
# inArray is the passed dataframe
#inAOI is the variable with which the function will be referred to the above defined AOIs (e.g. inAOI = fixAOI for centre)//
#newColName is the variable needed for the mutate function to create new col(name)
#checkXYinAOI is the function (see above) to check AOIs
createAOIcol <- function(inArray, inAOI, newColName) { # passes the function 3 variables with which create columns to check if fixations were within the areas of interest (AOI)
inArray %>% mutate(!!newColName := checkXYinAOI(x,y,inAOI)) # dfs that function is passed through will mutate new column which contains another function that checks fixations for AOIs
}
#maps above functions to allData
allEGData <- allEGData %>%
map(~createAOIcol(., inAOI = cueAOI, newColName = 'AOI_cues')) %>%
map(~createAOIcol(., inAOI = respAOI, newColName = 'AOI_resp')) %>%
map(~createAOIcol(., inAOI = outAOI, newColName = 'AOI_out'))
#function to edit all arrays in AOIdf to only include columns necessary for identifying first/last fixations
EditCols <- function(inArray) {
inArray %>%
select(subj,trial,period,x,y,dur,periodLatency,starts_with('AOI')) %>%  #name of cols in AOIdf that should be selected
group_by(trial) %>%
mutate(fixcount = 1:n()) %>% # fixcount column counting nr of fixations in a trial
arrange(trial) %>%
group_by(trial,period) %>%
mutate(fixcountP = 1:n())  # fixcount column counting nr of fixations in a period
}
allEGData <- map(allEGData, EditCols) # passes AOIdf through the EditCols to simplify and number the fixations per period
trialFIXED = data.frame(trial=c(1:72)) #dataframe with 480 rows to merge with new cols below:
# summed dwell time across trial
calcSummedDwellTime <- function(inArray) {
summedDwell <- inArray %>%
mutate(AOI_none = (AOI_cues==FALSE & AOI_resp==FALSE & AOI_out==FALSE)) %>%
mutate_at(vars(starts_with('AOI')), vars(dur*.)) %>% # this converts the TRUE/FALSE value in AOI cols into the duration (0 if FALSE)
group_by(trial,period) %>%
summarise_at(vars(starts_with('AOI')),sum) %>% # sum the columns across the period for each trial
pivot_wider(names_from = period, values_from = starts_with('AOI')) %>%  # pivot the 2 rows of period across one row, creating 4 new AOI variables
merge(trialFIXED,by = "trial", all = TRUE) # apply a trial column which reflects 1:72, irrespective of eye-gaze present or not.
# array of total fixations per period per trial.
numFix <- inArray %>%
group_by(trial, period) %>%
summarise(nFix = max(fixcountP)) %>%
pivot_wider(names_from = period, values_from = nFix, names_prefix = "nFix_") %>%
merge(trialFIXED,by = "trial", all = TRUE) # apply a trial column which reflects 1:72, irrespective of eye-gaze present or not.
outDF <- full_join(summedDwell, numFix, by = "trial")
return(outDF)
}
trialEGDwell <- map(allEGData,calcSummedDwellTime) # apply the function over each element of the list (each subject)
trialEGDwell <- do.call("rbind",trialEGDwell) # collapse the seperate lists into a single dataframe
trialEGDwell <- select(trialEGDwell,-trial)
# explore why P101 trial 7 produces no hits on AOI
p <- allEGData[[1]] %>%
filter(trial == 9)
# calculate time of first fixation on outcome during feedback
timeFix1_Out_FB <- function(inArray){
outDF <- inArray %>%
filter(period == 2, AOI_out==TRUE) %>%
group_by(subj,trial) %>%
filter(fixcount==min(fixcount)) %>%
merge(trialFIXED,by = "trial", all=TRUE) %>%
select(subj,trial,timeFixtoOut=periodLatency)
return(outDF)
}
timeOutFix <- map(allEGData,timeFix1_Out_FB)
timeOutFix <- do.call("rbind",timeOutFix)
# at this stage the two dataframes will be the same length and unique variables
# combine columns from EyeData and TrialData
combinedData <- cbind(allResponseData, trialEGDwell, tOutFix=timeOutFix$timeFixtoOut)
finalData <- combinedData %>%
mutate(phase = ceiling(trial/24),block=ceiling(trial/4)) %>%
select(subj:sex,phase,block,trial:tOutFix)
# add cu traits from CSV file
cu_traits <- read_csv('Exp5_CU.csv') %>%
mutate(subj = str_c("P", ID + 100, "_Exp5")) %>%# make subj column compatible with the other dataframe
select(subj, ICU) # order variables
finalData <- finalData %>%
left_join(cu_traits, by = 'subj') %>% # merge cu values with final dataframe
mutate(ICU_medSplit = factor(ICU<=median(ICU))) %>% # make a medium split factor
mutate(ICU_medSplit = recode_factor(ICU_medSplit, "TRUE"="Low","FALSE"="High")) # recode that factor to levels "High" and "Low"
write_csv(finalData, "Exp_5_proc_data.csv")
setwd("C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis")
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/2_addAOI_combineResp_Exp5.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/1_Raw2Saccades.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 5 analysis/2_addAOI_combineResp_Exp5.R', echo=TRUE)
rm(list=ls())
library(tidyverse)
load("Exp_5_data.RData")
View(allEGData)
allEGData <- filter(allEGData, periodLatency < 1000)
load("Exp_5_data.RData")
allEGData <- allEGData %>%
filter(period == 1,
period == 2 & periodLatency < 1000)
load("Exp_5_data.RData")
allEGData <- allEGData %>%
filter(period == 1 | (period == 2 & periodLatency < 1000))
rm(list=ls())
library(tidyverse)
load("Exp_5_data.RData")
# this limits feedback period to the first 1 second
allEGData <- allEGData %>%
filter(period == 1 | (period == 2 & periodLatency < 1000))
# Define AOIs
cue_AOI_dimensions = c(235,780,1685,1030)
resp_AOI_dimensions = c(235,400,1685,650)
out_AOI_dimensions = c(235,50,1685,300)
checkXYinAOI <- function(x, y, dur, AOI) { # passes the function 3 variables: x,y,and AOI
return((x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4])*dur) #
}
# add columns to the EG data which state whether each fixation was in the defined AOIs
allEGData <- allEGData %>%
rowwise() %>%
mutate(AOI_cue = checkXYinAOI(x,y,dur,cue_AOI_dimensions),
AOI_resp = checkXYinAOI(x,y,dur,resp_AOI_dimensions),
AOI_out = checkXYinAOI(x,y,dur,out_AOI_dimensions)) %>%
ungroup()
# summarise AOI time and nFix per period at the trial level
trialEG <- allEGData %>%
group_by(subj,trial,period) %>%
summarise(AOI_cue = sum(AOI_cue),
AOI_resp = sum(AOI_resp),
AOI_out = sum(AOI_out),
nFix = n()) %>% # number of fixations per period
pivot_wider(names_from = period, values_from = AOI_cue:nFix, names_prefix = "p") %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# summarise time of first AOI_out fixation during feedback, at the trial level
first_out_fix <- allEGData %>%
filter(period == 2, AOI_out > 0) %>%
group_by(subj,trial) %>%
slice(1) %>%
summarise(time = periodLatency) %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# pivot wider the quality data, so that each row is one trial
allQuality <- allQuality %>%
pivot_wider(names_from = period, values_from = samples:post_interp_NA, names_prefix = "p")
# combine the three arrays together
combinedData <- allResponseData %>%
left_join(trialEG, by = c("subj", "trial")) %>%
mutate(tOutFix = first_out_fix$time) %>%
left_join(allQuality, by = c("subj", "trial"))
# create new phase and block variables, and arrange variables
finalData <- combinedData %>%
mutate(phase = ceiling(trial/24),block=ceiling(trial/4)) %>%
select(subj:sex,phase,block,trial:AOI_out_p2, tOutFix, nFix_p1, nFix_p2, samples_p1:post_interp_NA_p2)
# add cu traits from CSV file
cu_traits <- read_csv('Exp5_CU.csv') %>%
mutate(subj = str_c("P", ID + 100, "_Exp5")) %>%# make subj column compatible with the other dataframe
select(subj, ICU) # order variables
# join CU traits to the final data, and create split variable
finalData <- finalData %>%
left_join(cu_traits, by = 'subj') %>% # merge cu values with final dataframe
mutate(ICU_medSplit = factor(ICU<=median(ICU))) %>% # make a medium split factor
mutate(ICU_medSplit = recode_factor(ICU_medSplit, "TRUE"="Low","FALSE"="High")) # recode that factor to levels "High" and "Low"
write_csv(finalData, "Exp_5_proc_data_1s.csv")
rm(list=ls())
library(tidyverse)
load("Exp_5_data.RData")
# this limits feedback period to the first 1 second
allEGData <- allEGData %>%
filter(period == 1 | (period == 2 & (periodLatency + dur) < 1000))
# Define AOIs
cue_AOI_dimensions = c(235,780,1685,1030)
resp_AOI_dimensions = c(235,400,1685,650)
out_AOI_dimensions = c(235,50,1685,300)
checkXYinAOI <- function(x, y, dur, AOI) { # passes the function 3 variables: x,y,and AOI
return((x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4])*dur) #
}
# add columns to the EG data which state whether each fixation was in the defined AOIs
allEGData <- allEGData %>%
rowwise() %>%
mutate(AOI_cue = checkXYinAOI(x,y,dur,cue_AOI_dimensions),
AOI_resp = checkXYinAOI(x,y,dur,resp_AOI_dimensions),
AOI_out = checkXYinAOI(x,y,dur,out_AOI_dimensions)) %>%
ungroup()
# summarise AOI time and nFix per period at the trial level
trialEG <- allEGData %>%
group_by(subj,trial,period) %>%
summarise(AOI_cue = sum(AOI_cue),
AOI_resp = sum(AOI_resp),
AOI_out = sum(AOI_out),
nFix = n()) %>% # number of fixations per period
pivot_wider(names_from = period, values_from = AOI_cue:nFix, names_prefix = "p") %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# summarise time of first AOI_out fixation during feedback, at the trial level
first_out_fix <- allEGData %>%
filter(period == 2, AOI_out > 0) %>%
group_by(subj,trial) %>%
slice(1) %>%
summarise(time = periodLatency) %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# pivot wider the quality data, so that each row is one trial
allQuality <- allQuality %>%
pivot_wider(names_from = period, values_from = samples:post_interp_NA, names_prefix = "p")
# combine the three arrays together
combinedData <- allResponseData %>%
left_join(trialEG, by = c("subj", "trial")) %>%
mutate(tOutFix = first_out_fix$time) %>%
left_join(allQuality, by = c("subj", "trial"))
# create new phase and block variables, and arrange variables
finalData <- combinedData %>%
mutate(phase = ceiling(trial/24),block=ceiling(trial/4)) %>%
select(subj:sex,phase,block,trial:AOI_out_p2, tOutFix, nFix_p1, nFix_p2, samples_p1:post_interp_NA_p2)
# add cu traits from CSV file
cu_traits <- read_csv('Exp5_CU.csv') %>%
mutate(subj = str_c("P", ID + 100, "_Exp5")) %>%# make subj column compatible with the other dataframe
select(subj, ICU) # order variables
# join CU traits to the final data, and create split variable
finalData <- finalData %>%
left_join(cu_traits, by = 'subj') %>% # merge cu values with final dataframe
mutate(ICU_medSplit = factor(ICU<=median(ICU))) %>% # make a medium split factor
mutate(ICU_medSplit = recode_factor(ICU_medSplit, "TRUE"="Low","FALSE"="High")) # recode that factor to levels "High" and "Low"
write_csv(finalData, "Exp_5_proc_data_1s.csv")
