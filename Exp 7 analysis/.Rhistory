## @knitr Process_Raw_to_Saccades
rm(list=ls())
library(tidyverse)
library(saccades)
library(zoo)
patternTypes <- c("dec","fb") #variable that differentiates between the 2 different csv files for the different experimental periods
fnams <- list.files("Exp 7 Raw Data CSV", pattern = "dec", full.names = TRUE) # needed for reading data
allEGData <- NULL # empty array to fill with processed data from all participants' raw data
allResponseData <- NULL
subNum = 1
# creates variable to extract file name (counting backwards from file name characters to get participant number)
subNum <- substr(fnams[s], start = nchar(fnams[s])-12, stop = nchar(fnams[s])-4)
s = 1
# creates variable to extract file name (counting backwards from file name characters to get participant number)
subNum <- substr(fnams[s], start = nchar(fnams[s])-12, stop = nchar(fnams[s])-4)
# creates variable to extract file name (counting backwards from file name characters to get participant number)
subNum <- substr(fnams[s], start = nchar(fnams[s])-11, stop = nchar(fnams[s])-4)
# creates variable to extract file name (counting backwards from file name characters to get participant number)
subNum <- substr(fnams[s], start = nchar(fnams[s])-13, stop = nchar(fnams[s])-4)
## @knitr Process_Raw_to_Saccades
rm(list=ls())
library(tidyverse)
library(saccades)
library(zoo)
patternTypes <- c("dec","fb") #variable that differentiates between the 2 different csv files for the different experimental periods
fnams <- list.files("Exp 7 Raw Data CSV", pattern = "dec", full.names = TRUE) # needed for reading data
allEGData <- NULL # empty array to fill with processed data from all participants' raw data
allResponseData <- NULL
for (s in 1:length(fnams)) { # telling it to run through all the "fix" period files in the raw data file
# creates variable to extract file name (counting backwards from file name characters to get participant number)
subNum <- substr(fnams[s], start = nchar(fnams[s])-13, stop = nchar(fnams[s])-4)
subFiles <- list.files("Exp 7 Raw Data CSV", pattern = subNum, full.names = TRUE) # needed for reading data
subData <- NULL
print(subNum)
for (p in 1:2) { #for loop that goes through all files pertaining to periods "dec","fb"
print(p)
curFile <- subFiles[str_detect(subFiles,pattern=patternTypes[p])] #variable that detects files of the relevant period (dec,fb)
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), .funs = ~ ifelse(. == "NaN", 0, .))
startTimes <- periodRaw %>%
group_by(trial) %>%
summarise(startTime=min(time)) # this gets the time of the first sample in each period
## ---- run_saccades_program
periodFix <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
period <- rep(p,nrow = periodFix) # generates an array that matches same nr of rows as 'periodFix' and adds an extra 'period' column
subj <- rep(subNum,nrow = periodFix) # generates an array that matches same nr of rows as 'periodFix' and adds 'subject nr' column
periodFix <- cbind(subj,period,periodFix) # overwrites 'saccades' periodFix by combining existing periodFix with subject nr col and period col
periodFix <- merge(startTimes,periodFix, by = "trial") # add the startTimes column to periodFix
subData <- rbind(subData,periodFix)
}
subData <- subData %>% mutate(periodLatency = start-startTime) %>% # work out fixation latency from start of period.
select(subj,trial,period,startTime,start,end,dur,periodLatency,x:peak.vy) # reorder the columns
allEGData[[s]] <- subData
curFile <- subFiles[str_detect(subFiles,pattern="trial")] # detect trial data file
respData <- read_csv(curFile, col_types = cols(X3 = col_character()), col_names = FALSE) # read the data from csv
allResponseData <- rbind(allResponseData,respData) # great large dataframe
}
# rename variables, recode sex variable values for consistency
colnames(allResponseData) <- c("subj","age","sex","trial","cue","resp","out","numResp","RT")
allResponseData$sex <- recode(allResponseData$sex, 'f' = "F", 'm' = "M")
save(list=c("allEGData", "allResponseData"), file="Exp_7_data.RData")
library(tidyverse)
load("Exp_7_data.RData")
# Define AOIs
cueAOI = c(235,780,1685,1030)
respAOI = c(235,400,1685,650)
outAOI = c(235,50,1685,300)
# Define AOIs - these are the same as condition 1 and 3 in Experiment 6 (DOUBLE CHECK WITH CM)
cueAOI = c(135,880,1785,1030)
respAOI = c(135,600,1785,750)
outAOI = c(135,50,1785,200)
checkXYinAOI <- function(x,y,AOI) { # passes the function 3 variables: x,y,and AOI
return(x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4]) #
}
createAOIcol <- function(inArray, inAOI, newColName) { # passes the function 3 variables with which create columns to check if fixations were within the areas of interest (AOI)
inArray %>% mutate(!!newColName := checkXYinAOI(x,y,inAOI)) # dfs that function is passed through will mutate new column which contains another function that checks fixations for AOIs
}
#maps above functions to allData
allEGData <- allEGData %>%
map(~createAOIcol(., inAOI = cueAOI, newColName = 'AOI_cues')) %>%
map(~createAOIcol(., inAOI = respAOI, newColName = 'AOI_resp')) %>%
map(~createAOIcol(., inAOI = outAOI, newColName = 'AOI_out'))
#function to edit all arrays in AOIdf to only include columns necessary for identifying first/last fixations
EditCols <- function(inArray) {
inArray %>%
select(subj,trial,period,x,y,dur,periodLatency,starts_with('AOI')) %>%  #name of cols in AOIdf that should be selected
group_by(trial) %>%
mutate(fixcount = 1:n()) %>% # fixcount column counting nr of fixations in a trial
arrange(trial) %>%
group_by(trial,period) %>%
mutate(fixcountP = 1:n())  # fixcount column counting nr of fixations in a period
}
allEGData <- map(allEGData, EditCols) # passes AOIdf through the EditCols to simplify and number the fixations per period
library(tidyverse)
library(tidyr)
library(cgwtools)
trialFIXED = data.frame(trial=c(1:72)) #dataframe with 480 rows to merge with new cols below:
# summed dwell time across trial
calcSummedDwellTime <- function(inArray) {
outDF <- inArray %>%
mutate(AOI_none = (AOI_cues==FALSE & AOI_resp==FALSE & AOI_out==FALSE)) %>%
mutate_at(vars(starts_with('AOI')), vars(dur*.)) %>% # this converts the TRUE/FALSE value in AOI cols into the duration (0 if FALSE)
group_by(trial,period) %>%
summarise_at(vars(starts_with('AOI')),sum) %>% # sum the columns across the period for each trial
pivot_wider(names_from = period, values_from = starts_with('AOI')) %>%  # pivot the 2 rows of period across one row, creating 4 new AOI variables
merge(trialFIXED,by = "trial", all = TRUE) # apply a trial column which reflects 1:72, irrespective of eye-gaze present or not.
return(outDF)
}
trialEGDwell <- map(allEGData,calcSummedDwellTime) # apply the function over each element of the list (each subject)
trialEGDwell <- do.call("rbind",trialEGDwell) # collapse the seperate lists into a single dataframe
trialEGDwell <- select(trialEGDwell,-trial)
# calculate time of first fixation on outcome during feedback
timeFix1_Out_FB <- function(inArray){
outDF <- inArray %>%
filter(period == 2, AOI_out==TRUE) %>%
group_by(subj,trial) %>%
filter(fixcount==min(fixcount)) %>%
merge(trialFIXED,by = "trial", all=TRUE) %>%
select(subj,trial,timeFixtoOut=periodLatency)
return(outDF)
}
timeOutFix <- map(allEGData,timeFix1_Out_FB)
timeOutFix <- do.call("rbind",timeOutFix)
# at this stage the two dataframes will be the same length and unique variables
# combine columns from EyeData and TrialData
combinedData <- cbind(allResponseData, trialEGDwell, tOutFix=timeOutFix$timeFixtoOut)
View(combinedData)
finalData <- combinedData %>%
mutate(phase = ceiling(trial/24),block=ceiling(trial/4)) %>%
select(subj:age,phase,block,trial:tOutFix)
# add cu traits from CSV file
cu_traits <- read_csv('Exp7_CU.csv')
colnames(cu_traits)[1] <- 'subj' # change 'ID' to 'subj'
finalData <- finalData %>% merge(cu_traits, by = 'subj') %>% # merge cu values with final dataframe
mutate(ICU_medSplit = factor(ICU<=median(ICU))) %>% # make a medium split factor
mutate(ICU_medSplit = recode_factor(ICU_medSplit, "TRUE"="Low","FALSE"="High")) # recode that factor to levels "High" and "Low"
write_csv(finalData, "Exp_7_proc_data.csv")
load("Exp_7_data.RData")
## @knitr Process_Raw_to_Saccades
rm(list=ls())
library(tidyverse)
library(saccades)
library(zoo)
patternTypes <- c("dec","fb") #variable that differentiates between the 2 different csv files for the different experimental periods
fnams <- list.files("Exp 7 Raw Data CSV", pattern = "dec", full.names = TRUE) # needed for reading data
allEGData <- NULL # empty array to fill with processed data from all participants' raw data
allResponseData <- NULL
for (s in 1:length(fnams)) { # telling it to run through all the "fix" period files in the raw data file
# creates variable to extract file name (counting backwards from file name characters to get participant number)
subNum <- substr(fnams[s], start = nchar(fnams[s])-13, stop = nchar(fnams[s])-4)
subFiles <- list.files("Exp 7 Raw Data CSV", pattern = subNum, full.names = TRUE) # needed for reading data
subData <- NULL
print(subNum)
for (p in 1:2) { #for loop that goes through all files pertaining to periods "dec","fb"
print(p)
curFile <- subFiles[str_detect(subFiles,pattern=patternTypes[p])] #variable that detects files of the relevant period (dec,fb)
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), .funs = ~ ifelse(. == "NaN", 0, .))
startTimes <- periodRaw %>%
group_by(trial) %>%
summarise(startTime=min(time)) # this gets the time of the first sample in each period
## ---- run_saccades_program
periodFix <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
period <- rep(p,nrow = periodFix) # generates an array that matches same nr of rows as 'periodFix' and adds an extra 'period' column
subj <- rep(subNum,nrow = periodFix) # generates an array that matches same nr of rows as 'periodFix' and adds 'subject nr' column
periodFix <- cbind(subj,period,periodFix) # overwrites 'saccades' periodFix by combining existing periodFix with subject nr col and period col
periodFix <- merge(startTimes,periodFix, by = "trial") # add the startTimes column to periodFix
subData <- rbind(subData,periodFix)
}
subData <- subData %>% mutate(periodLatency = start-startTime) %>% # work out fixation latency from start of period.
select(subj,trial,period,startTime,start,end,dur,periodLatency,x:peak.vy) # reorder the columns
allEGData[[s]] <- subData
curFile <- subFiles[str_detect(subFiles,pattern="trial")] # detect trial data file
respData <- read_csv(curFile, col_types = cols(X3 = col_character()), col_names = FALSE) # read the data from csv
respData$X1 <- subNum #replace the subNum with the complete one from the file name
allResponseData <- rbind(allResponseData,respData) # great large dataframe
}
# rename variables, recode sex variable values for consistency
colnames(allResponseData) <- c("subj","age","sex","trial","cue","resp","out","numResp","RT")
allResponseData$sex <- recode(allResponseData$sex, 'f' = "F", 'm' = "M")
save(list=c("allEGData", "allResponseData"), file="Exp_7_data.RData")
## @knitr viewFixations
library(tidyverse)
load("Exp_7_data.RData")
# Define AOIs - these are the same as condition 1 and 3 in Experiment 6 (DOUBLE CHECK WITH CM)
cueAOI = c(135,880,1785,1030)
respAOI = c(135,600,1785,750)
outAOI = c(135,50,1785,200)
checkXYinAOI <- function(x,y,AOI) { # passes the function 3 variables: x,y,and AOI
return(x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4]) #
}
#createAOIcol is name of function //
# inArray is the passed dataframe
#inAOI is the variable with which the function will be referred to the above defined AOIs (e.g. inAOI = fixAOI for centre)//
#newColName is the variable needed for the mutate function to create new col(name)
#checkXYinAOI is the function (see above) to check AOIs (not sure why x,y,inAOI is in brackets...)
createAOIcol <- function(inArray, inAOI, newColName) { # passes the function 3 variables with which create columns to check if fixations were within the areas of interest (AOI)
inArray %>% mutate(!!newColName := checkXYinAOI(x,y,inAOI)) # dfs that function is passed through will mutate new column which contains another function that checks fixations for AOIs
}
#maps above functions to allData
allEGData <- allEGData %>%
map(~createAOIcol(., inAOI = cueAOI, newColName = 'AOI_cues')) %>%
map(~createAOIcol(., inAOI = respAOI, newColName = 'AOI_resp')) %>%
map(~createAOIcol(., inAOI = outAOI, newColName = 'AOI_out'))
#function to edit all arrays in AOIdf to only include columns necessary for identifying first/last fixations
EditCols <- function(inArray) {
inArray %>%
select(subj,trial,period,x,y,dur,periodLatency,starts_with('AOI')) %>%  #name of cols in AOIdf that should be selected
group_by(trial) %>%
mutate(fixcount = 1:n()) %>% # fixcount column counting nr of fixations in a trial
arrange(trial) %>%
group_by(trial,period) %>%
mutate(fixcountP = 1:n())  # fixcount column counting nr of fixations in a period
}
allEGData <- map(allEGData, EditCols) # passes AOIdf through the EditCols to simplify and number the fixations per period
trialFIXED = data.frame(trial=c(1:72)) #dataframe with 480 rows to merge with new cols below:
# summed dwell time across trial
calcSummedDwellTime <- function(inArray) {
outDF <- inArray %>%
mutate(AOI_none = (AOI_cues==FALSE & AOI_resp==FALSE & AOI_out==FALSE)) %>%
mutate_at(vars(starts_with('AOI')), vars(dur*.)) %>% # this converts the TRUE/FALSE value in AOI cols into the duration (0 if FALSE)
group_by(trial,period) %>%
summarise_at(vars(starts_with('AOI')),sum) %>% # sum the columns across the period for each trial
pivot_wider(names_from = period, values_from = starts_with('AOI')) %>%  # pivot the 2 rows of period across one row, creating 4 new AOI variables
merge(trialFIXED,by = "trial", all = TRUE) # apply a trial column which reflects 1:72, irrespective of eye-gaze present or not.
return(outDF)
}
trialEGDwell <- map(allEGData,calcSummedDwellTime) # apply the function over each element of the list (each subject)
trialEGDwell <- do.call("rbind",trialEGDwell) # collapse the seperate lists into a single dataframe
trialEGDwell <- select(trialEGDwell,-trial)
# calculate time of first fixation on outcome during feedback
timeFix1_Out_FB <- function(inArray){
outDF <- inArray %>%
filter(period == 2, AOI_out==TRUE) %>%
group_by(subj,trial) %>%
filter(fixcount==min(fixcount)) %>%
merge(trialFIXED,by = "trial", all=TRUE) %>%
select(subj,trial,timeFixtoOut=periodLatency)
return(outDF)
}
timeOutFix <- map(allEGData,timeFix1_Out_FB)
timeOutFix <- do.call("rbind",timeOutFix)
# at this stage the two dataframes will be the same length and unique variables
# combine columns from EyeData and TrialData
combinedData <- cbind(allResponseData, trialEGDwell, tOutFix=timeOutFix$timeFixtoOut)
finalData <- combinedData %>%
mutate(phase = ceiling(trial/24),block=ceiling(trial/4)) %>%
select(subj:age,phase,block,trial:tOutFix)
# add cu traits from CSV file
cu_traits <- read_csv('Exp7_CU.csv') %>%
mutate(subj = str_c("P", ID, "_Exp7")) %>%# make subj column compatible with the other dataframe
select(subj, ICU) # order variables
finalData <- finalData %>% merge(cu_traits, by = 'subj') %>% # merge cu values with final dataframe
mutate(ICU_medSplit = factor(ICU<=median(ICU))) %>% # make a medium split factor
mutate(ICU_medSplit = recode_factor(ICU_medSplit, "TRUE"="Low","FALSE"="High")) # recode that factor to levels "High" and "Low"
write_csv(finalData, "Exp_7_proc_data.csv")
## @knitr viewFixations
library(tidyverse)
load("Exp_7_data.RData")
# Define AOIs - these are the same as condition 1 and 3 in Experiment 6 (DOUBLE CHECK WITH CM)
cueAOI = c(135,880,1785,1030)
respAOI = c(135,600,1785,750)
outAOI = c(135,50,1785,200)
checkXYinAOI <- function(x,y,AOI) { # passes the function 3 variables: x,y,and AOI
return(x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4]) #
}
#createAOIcol is name of function //
# inArray is the passed dataframe
#inAOI is the variable with which the function will be referred to the above defined AOIs (e.g. inAOI = fixAOI for centre)//
#newColName is the variable needed for the mutate function to create new col(name)
#checkXYinAOI is the function (see above) to check AOIs (not sure why x,y,inAOI is in brackets...)
createAOIcol <- function(inArray, inAOI, newColName) { # passes the function 3 variables with which create columns to check if fixations were within the areas of interest (AOI)
inArray %>% mutate(!!newColName := checkXYinAOI(x,y,inAOI)) # dfs that function is passed through will mutate new column which contains another function that checks fixations for AOIs
}
#maps above functions to allData
allEGData <- allEGData %>%
map(~createAOIcol(., inAOI = cueAOI, newColName = 'AOI_cues')) %>%
map(~createAOIcol(., inAOI = respAOI, newColName = 'AOI_resp')) %>%
map(~createAOIcol(., inAOI = outAOI, newColName = 'AOI_out'))
#function to edit all arrays in AOIdf to only include columns necessary for identifying first/last fixations
EditCols <- function(inArray) {
inArray %>%
select(subj,trial,period,x,y,dur,periodLatency,starts_with('AOI')) %>%  #name of cols in AOIdf that should be selected
group_by(trial) %>%
mutate(fixcount = 1:n()) %>% # fixcount column counting nr of fixations in a trial
arrange(trial) %>%
group_by(trial,period) %>%
mutate(fixcountP = 1:n())  # fixcount column counting nr of fixations in a period
}
allEGData <- map(allEGData, EditCols) # passes AOIdf through the EditCols to simplify and number the fixations per period
trialFIXED = data.frame(trial=c(1:72)) #dataframe with 480 rows to merge with new cols below:
# summed dwell time across trial
calcSummedDwellTime <- function(inArray) {
outDF <- inArray %>%
mutate(AOI_none = (AOI_cues==FALSE & AOI_resp==FALSE & AOI_out==FALSE)) %>%
mutate_at(vars(starts_with('AOI')), vars(dur*.)) %>% # this converts the TRUE/FALSE value in AOI cols into the duration (0 if FALSE)
group_by(trial,period) %>%
summarise_at(vars(starts_with('AOI')),sum) %>% # sum the columns across the period for each trial
pivot_wider(names_from = period, values_from = starts_with('AOI')) %>%  # pivot the 2 rows of period across one row, creating 4 new AOI variables
merge(trialFIXED,by = "trial", all = TRUE) # apply a trial column which reflects 1:72, irrespective of eye-gaze present or not.
return(outDF)
}
trialEGDwell <- map(allEGData,calcSummedDwellTime) # apply the function over each element of the list (each subject)
trialEGDwell <- do.call("rbind",trialEGDwell) # collapse the seperate lists into a single dataframe
trialEGDwell <- select(trialEGDwell,-trial)
# calculate time of first fixation on outcome during feedback
timeFix1_Out_FB <- function(inArray){
outDF <- inArray %>%
filter(period == 2, AOI_out==TRUE) %>%
group_by(subj,trial) %>%
filter(fixcount==min(fixcount)) %>%
merge(trialFIXED,by = "trial", all=TRUE) %>%
select(subj,trial,timeFixtoOut=periodLatency)
return(outDF)
}
timeOutFix <- map(allEGData,timeFix1_Out_FB)
timeOutFix <- do.call("rbind",timeOutFix)
# at this stage the two dataframes will be the same length and unique variables
# combine columns from EyeData and TrialData
combinedData <- cbind(allResponseData, trialEGDwell, tOutFix=timeOutFix$timeFixtoOut)
finalData <- combinedData %>%
mutate(phase = ceiling(trial/24),block=ceiling(trial/4)) %>%
select(subj:age,phase,block,trial:tOutFix)
# add cu traits from CSV file
cu_traits <- read_csv('Exp7_CU.csv') %>%
mutate(subj = str_c("P", ID, "_Exp7")) %>% # make subj column compatible with the other dataframe
select(subj, ICU) # order variables
# add cu traits from CSV file
cu_traits <- read_csv('Exp7_CU.csv') %>%
mutate(subj = str_c("P", subj, "_Exp7")) %>% # make subj column compatible with the other dataframe
select(subj, ICU) # order variables
finalData <- finalData %>% merge(cu_traits, by = 'subj') %>% # merge cu values with final dataframe
mutate(ICU_medSplit = factor(ICU<=median(ICU))) %>% # make a medium split factor
mutate(ICU_medSplit = recode_factor(ICU_medSplit, "TRUE"="Low","FALSE"="High")) # recode that factor to levels "High" and "Low"
write_csv(finalData, "Exp_7_proc_data.csv")
## @knitr viewFixations
library(tidyverse)
load("Exp_7_data.RData")
# Define AOIs - these are the same as condition 1 and 3 in Experiment 6 (DOUBLE CHECK WITH CM)
cueAOI = c(135,880,1785,1030)
respAOI = c(135,600,1785,750)
outAOI = c(135,50,1785,200)
checkXYinAOI <- function(x,y,AOI) { # passes the function 3 variables: x,y,and AOI
return(x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4]) #
}
#createAOIcol is name of function //
# inArray is the passed dataframe
#inAOI is the variable with which the function will be referred to the above defined AOIs (e.g. inAOI = fixAOI for centre)//
#newColName is the variable needed for the mutate function to create new col(name)
#checkXYinAOI is the function (see above) to check AOIs (not sure why x,y,inAOI is in brackets...)
createAOIcol <- function(inArray, inAOI, newColName) { # passes the function 3 variables with which create columns to check if fixations were within the areas of interest (AOI)
inArray %>% mutate(!!newColName := checkXYinAOI(x,y,inAOI)) # dfs that function is passed through will mutate new column which contains another function that checks fixations for AOIs
}
#maps above functions to allData
allEGData <- allEGData %>%
map(~createAOIcol(., inAOI = cueAOI, newColName = 'AOI_cues')) %>%
map(~createAOIcol(., inAOI = respAOI, newColName = 'AOI_resp')) %>%
map(~createAOIcol(., inAOI = outAOI, newColName = 'AOI_out'))
#function to edit all arrays in AOIdf to only include columns necessary for identifying first/last fixations
EditCols <- function(inArray) {
inArray %>%
select(subj,trial,period,x,y,dur,periodLatency,starts_with('AOI')) %>%  #name of cols in AOIdf that should be selected
group_by(trial) %>%
mutate(fixcount = 1:n()) %>% # fixcount column counting nr of fixations in a trial
arrange(trial) %>%
group_by(trial,period) %>%
mutate(fixcountP = 1:n())  # fixcount column counting nr of fixations in a period
}
allEGData <- map(allEGData, EditCols) # passes AOIdf through the EditCols to simplify and number the fixations per period
trialFIXED = data.frame(trial=c(1:72)) #dataframe with 480 rows to merge with new cols below:
# summed dwell time across trial
calcSummedDwellTime <- function(inArray) {
outDF <- inArray %>%
mutate(AOI_none = (AOI_cues==FALSE & AOI_resp==FALSE & AOI_out==FALSE)) %>%
mutate_at(vars(starts_with('AOI')), vars(dur*.)) %>% # this converts the TRUE/FALSE value in AOI cols into the duration (0 if FALSE)
group_by(trial,period) %>%
summarise_at(vars(starts_with('AOI')),sum) %>% # sum the columns across the period for each trial
pivot_wider(names_from = period, values_from = starts_with('AOI')) %>%  # pivot the 2 rows of period across one row, creating 4 new AOI variables
merge(trialFIXED,by = "trial", all = TRUE) # apply a trial column which reflects 1:72, irrespective of eye-gaze present or not.
return(outDF)
}
trialEGDwell <- map(allEGData,calcSummedDwellTime) # apply the function over each element of the list (each subject)
trialEGDwell <- do.call("rbind",trialEGDwell) # collapse the seperate lists into a single dataframe
trialEGDwell <- select(trialEGDwell,-trial)
# calculate time of first fixation on outcome during feedback
timeFix1_Out_FB <- function(inArray){
outDF <- inArray %>%
filter(period == 2, AOI_out==TRUE) %>%
group_by(subj,trial) %>%
filter(fixcount==min(fixcount)) %>%
merge(trialFIXED,by = "trial", all=TRUE) %>%
select(subj,trial,timeFixtoOut=periodLatency)
return(outDF)
}
timeOutFix <- map(allEGData,timeFix1_Out_FB)
timeOutFix <- do.call("rbind",timeOutFix)
# at this stage the two dataframes will be the same length and unique variables
# combine columns from EyeData and TrialData
combinedData <- cbind(allResponseData, trialEGDwell, tOutFix=timeOutFix$timeFixtoOut)
finalData <- combinedData %>%
mutate(phase = ceiling(trial/24),block=ceiling(trial/4)) %>%
select(subj:sex,phase,block,trial:tOutFix)
# add cu traits from CSV file
cu_traits <- read_csv('Exp7_CU.csv') %>%
mutate(subj = str_c("P", subj, "_Exp7")) %>% # make subj column compatible with the other dataframe
select(subj, ICU) # order variables
finalData <- finalData %>%
left_join(cu_traits, by = 'subj') %>% # merge cu values with final dataframe
mutate(ICU_medSplit = factor(ICU<=median(ICU))) %>% # make a medium split factor
mutate(ICU_medSplit = recode_factor(ICU_medSplit, "TRUE"="Low","FALSE"="High")) # recode that factor to levels "High" and "Low"
write_csv(finalData, "Exp_7_proc_data.csv")
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 7 analysis/1_Raw2Saccades.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 7 analysis/2_addAOI_combineResp_Exp7.R', echo=TRUE)
source('C:/Users/beesleyt/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 7 analysis/2_addAOI_combineResp_Exp7.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 7 analysis/1_Raw2Saccades.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 7 analysis/2_addAOI_combineResp_Exp7.R', echo=TRUE)
sessionInfo()
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 7 analysis/1_Raw2Saccades.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 7 analysis/2_addAOI_combineResp_Exp7.R', echo=TRUE)
