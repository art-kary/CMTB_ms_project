allEGData %>%
filter(period == 2, AOI_out > 0) %>%
group_by(subj,trial) %>%
slice(1) %>%
summarise(timeFixtoOut=periodLatency) %>%
ungroup() %>%
complete(trial)
#first_out_fix <-
allEGData %>%
filter(period == 2, AOI_out > 0) %>%
group_by(subj,trial) %>%
slice(1) %>%
summarise(timeFixtoOut=periodLatency) %>%
ungroup() %>%
complete(subj,trial) %>%
arrange(subj,trial)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 3 analysis/2_addAOI_combineResp_Exp3_Experimental.R', echo=TRUE)
rm(list=ls())
library(tidyverse)
load("Exp_3_data_Experimental.RData")
# Define AOIs
cue_AOI_dimensions = c(235,780,1685,1030)
resp_AOI_dimensions = c(235,400,1685,650)
out_AOI_dimensions = c(235,50,1685,300)
checkXYinAOI <- function(x, y, dur, AOI) { # passes the function 3 variables: x,y,and AOI
return((x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4])*dur) #
}
# add columns to the EG data which state whether each fixation was in the defined AOIs
allEGData <- allEGData %>%
rowwise() %>%
mutate(AOI_cue = checkXYinAOI(x,y,dur,cue_AOI_dimensions),
AOI_resp = checkXYinAOI(x,y,dur,resp_AOI_dimensions),
AOI_out = checkXYinAOI(x,y,dur,out_AOI_dimensions)) %>%
ungroup()
# summarise AOI time and nFix per period at the trial level
trialEG <- allEGData %>%
group_by(subj,trial,period) %>%
summarise(AOI_cue = sum(AOI_cue),
AOI_resp = sum(AOI_resp),
AOI_out = sum(AOI_out),
nFix = n()) %>% # number of fixations per period
pivot_wider(names_from = period, values_from = AOI_cue:nFix) %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# summarise time of first AOI_out fixation during feedback, at the trial level
first_out_fix <- allEGData %>%
filter(period == 2, AOI_out > 0) %>%
group_by(subj,trial) %>%
slice(1) %>%
summarise(time = periodLatency) %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# combine the two EG arrays with the response data
combinedData <- cbind(allResponseData, trialEG, tOutFix = first_out_fix$time)
finalData <- combinedData %>%
mutate(phase = ceiling(trial/24),block=ceiling(trial/4)) %>%
select(subj:sex,phase,block,trial:tOutFix)
View(combinedData)
# combine the two EG arrays with the response data
combinedData <- allResponseData %>%
left_join(trialEG, by = c("subj", "trial")
, tOutFix = first_out_fix$time)
# combine the two EG arrays with the response data
combinedData <- allResponseData %>%
left_join(trialEG, by = c("subj", "trial"))
View(combinedData)
46*72
# combine the two EG arrays with the response data
combinedData <- allResponseData %>%
left_join(trialEG, by = c("subj", "trial"), tOutFix = first_out_fix$time)
View(combinedData)
# combine the two EG arrays with the response data
combinedData <- allResponseData %>%
left_join(trialEG, by = c("subj", "trial")) %>%
mutate(tOutFix = first_out_fix$time)
View(combinedData)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 3 analysis/2_addAOI_combineResp_Exp3_Experimental.R', echo=TRUE)
debugSource('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 3 analysis/1_Raw2Saccades.R', echo=TRUE)
# evaluate prop NaN for data quality check
periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
n_isna = n(is.nan))
# evaluate prop NaN for data quality check
periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
n_isna = n(is.nan()))
# evaluate prop NaN for data quality check
periodRaw %>%
group_by(trial) %>%
summarise(samples = n())
# evaluate prop NaN for data quality check
periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
n_isna = count(is.nan()))
periodRaw
View(periodRaw)
# evaluate prop NaN for data quality check
periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
n_isna = count(is.nan(x)))
# evaluate prop NaN for data quality check
periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
n_isna = n(is.nan(x)))
periodRaw %>% is.nan(x)
is.nan(periodRaw$x)
n(is.nan(periodRaw$x))
# evaluate prop NaN for data quality check
periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
isna = length(is.nan(x)))
# evaluate prop NaN for data quality check
periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
isna = (is.nan(x)==TRUE))
# evaluate prop NaN for data quality check
periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
isna = length(is.nan(x)==TRUE))
# evaluate prop NaN for data quality check
periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
isna = sum(is.nan(x)==TRUE))
periodRaw %>%
group_by(trial) %>%
summarise(post_NA = sum(x==0))
periodRaw %>%
group_by(trial) %>%
summarise(post_NA = sum(x))
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, round(.))) # turn any remaining NAs into 0
periodRaw %>%
group_by(trial) %>%
summarise(post_NA = sum(x==0))
# evaluate prop NaN for data quality check (dqc)
dqc <- periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
pre_NA = sum(is.nan(x)==TRUE))
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, round(.))) # turn any remaining NAs into 0
dqc <- periodRaw %>%
group_by(trial) %>%
summarise(post_NA = sum(x==0)) %>%
left_join(dqc)
dqc <- periodRaw %>%
group_by(trial) %>%
summarise(post_NA = sum(x==0)) %>%
left_join(dqc, by = "trial")
# evaluate prop NaN for data quality check (dqc)
dqc <- periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
pre_NA = sum(is.nan(x)==TRUE))
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, round(.))) # turn any remaining NAs into 0
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
# evaluate prop NaN for data quality check (dqc)
dqc <- periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
pre_NA = sum(is.nan(x)==TRUE))
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, round(.))) # turn any remaining NAs into 0
dqc <- periodRaw %>%
group_by(trial) %>%
summarise(post_NA = sum(x==0)) %>%
left_join(dqc, by = "trial")
View(dqc)
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
# evaluate prop NaN for data quality check (dqc)
dqc <- periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
pre_NA = sum(is.nan(x)==TRUE))
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, round(.))) # turn any remaining NAs into 0
dqc <- periodRaw %>%
group_by(trial) %>%
summarise(post_NA = sum(x==0)) %>%
right_join(dqc, by = "trial")
rm(list=ls())
library(tidyverse)
library(saccades)
library(zoo) # used for the na.spline function
Experiment <- 3
rawDir <- str_c("Exp ", Experiment, " Raw Data CSV")
patternTypes <- c("dec","fb") #variable that differentiates between the 2 different csv files for the different experimental periods
fnams <- list.files(rawDir, pattern = "dec", full.names = TRUE) # needed for reading data
allEGData <- NULL # empty array to fill with processed data from all participants' raw data
allResponseData <- NULL
allDataQuality <- NULL
for (s in 1:length(fnams)) { # telling it to run through all the "fix" period files in the raw data file
# creates variable to extract file name (counting backwards from file name characters to get participant number)
subNum <- substr(fnams[s], start = nchar(fnams[s])-12, stop = nchar(fnams[s])-4)
subFiles <- list.files(rawDir, pattern = subNum, full.names = TRUE) # needed for reading data
subData <- NULL
dataQuality <- NULL
print(subNum)
for (p in 1:2) { #for loop that goes through all files pertaining to periods "dec","fb"
print(p)
curFile <- subFiles[str_detect(subFiles,pattern=patternTypes[p])] #variable that detects files of the relevant period (dec,fb)
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read the data from csv
colnames(periodRaw) <- c("time","x","y","trial")
# evaluate prop missing data (NaN) for data quality check (dqc)
dataQuality <- periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
pre_NA = sum(is.nan(x)==TRUE))
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, round(.))) # turn any remaining NAs into 0
# evaluate prop missing data (0) post interpolation for data quality check (dqc)
dataQuality <- periodRaw %>%
group_by(trial) %>%
summarise(post_NA = sum(x==0)) %>%
right_join(dataQuality, by = "trial") %>%
mutate(subj = subNum,
period = p) %>%
select(subj, trial, period, samples, pre_NA, post_NA)
startTimes <- periodRaw %>%
group_by(trial) %>%
summarise(startTime=min(time)) # this gets the time of the first sample in each period
## ---- run_saccades_program
periodFix <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
periodFix <- periodFix %>%
mutate(subj = subNum,
period = p) %>%
left_join(startTimes, by = "trial") # add the startTimes column to periodFix
subData <- rbind(subData,periodFix)
}
subData <- subData %>% mutate(periodLatency = start-startTime) %>% # work out fixation latency from start of period.
select(subj,trial,period,startTime,start,end,dur,periodLatency,x:peak.vy) # reorder the columns
allEGData <- rbind(allEGData, subData)
allDataQuality <- rbind(allDataQuality, dataQuality)
curFile <- subFiles[str_detect(subFiles,pattern="trial")] # detect trial data file
respData <- read_csv(curFile, col_types = cols(X3 = col_character()), col_names = FALSE) # read the data from csv
respData$X1 <- subNum #replace the subNum with the complete one from the file name
allResponseData <- rbind(allResponseData,respData) # great large dataframe
}
# rename variables, recode sex variable values for consistency
colnames(allResponseData) <- c("subj","age","sex","trial","cue","resp","out","numResp","RT")
allResponseData$sex <- recode(allResponseData$sex, 'f' = "F", 'm' = "M")
View(allDataQuality)
View(allEGData)
View(allResponseData)
View(allDataQuality)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 3 analysis/1_Raw2Saccades.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 3 analysis/1_Raw2Saccades.R', echo=TRUE)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 3 analysis/1_Raw2Saccades.R', echo=TRUE)
View(allDataQuality)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 3 analysis/1_Raw2Saccades.R', echo=TRUE)
View(allDataQuality)
72*2*46
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 3 analysis/1_Raw2Saccades.R', echo=TRUE)
rm(list=ls())
library(tidyverse)
library(saccades)
library(zoo) # used for the na.spline function
Experiment <- 3
rawDir <- str_c("Exp ", Experiment, " Raw Data CSV")
patternTypes <- c("dec","fb") # used for reading the 2 different types of EG csv files, one type for each experimental period
fnams <- list.files(rawDir, pattern = "dec", full.names = TRUE) # list of file names of one type (i.e., the unique participants)
# these are the 3 main arrays which will contain all the data from all participants
# these are saved at the end of this program
allEGData <- NULL
allResponseData <- NULL
allQuality <- NULL
for (s in 1:length(fnams)) { # run through the files from each participant
# creates variable to extract file name (counting backwards from file name characters to get participant number)
subNum <- substr(fnams[s], start = nchar(fnams[s])-12, stop = nchar(fnams[s])-4)
subFiles <- list.files(rawDir, pattern = subNum, full.names = TRUE) # gets files associated with that participant
subData <- NULL
subQuality <- NULL
print(subNum)
for (p in 1:2) { # for each of the two periods of EG data: "dec" and "fb"
print(p)
curFile <- subFiles[str_detect(subFiles,pattern=patternTypes[p])] # pulls out the relevant file, based on patternTypes
periodRaw <- read_csv(curFile, col_types = cols(), col_names = FALSE) # read csv
colnames(periodRaw) <- c("time","x","y","trial") # new colnames which fit required variables for "detect.fixations"
# evaluate prop missing data (NaN) for data quality
periodQuality <- periodRaw %>%
group_by(trial) %>%
summarise(samples = n(),
raw_NA = sum(is.nan(x)==TRUE))
periodRaw <- periodRaw %>%
mutate_at(vars(x,y), ~ifelse(is.nan(.), NA, .)) %>% # replace NaN with NA
mutate_at(vars(x,y), na.spline, maxgap = 25) %>% # interpolate
mutate_at(vars(x,y), ~ifelse(is.na(.), 0, round(.))) # turn any remaining NAs into 0
# evaluate prop missing data (0) post interpolation for data quality
periodQuality <- periodRaw %>%
group_by(trial) %>%
summarise(post_interp_NA = sum(x==0)) %>%
right_join(periodQuality, by = "trial") %>% # join to pre interpolation dqc
mutate(subj = subNum,
period = p) %>%
select(subj, trial, period, samples, raw_NA, post_interp_NA)
subQuality <- rbind(subQuality, periodQuality) # combine period data quality array for subject
startTimes <- periodRaw %>%
group_by(trial) %>%
summarise(startTime=min(time)) # this gets the time of the first sample in each period
# run "detect.fixations" from the saccades package
periodData <- subset(detect.fixations(periodRaw), event=="fixation") # extract those fixations
periodData <- periodData %>%
mutate(subj = subNum, period = p) %>%
left_join(startTimes, by = "trial") # add the startTimes column to periodFix
subData <- rbind(subData,periodData) # combine period data for subject
}
subData <- subData %>%
mutate(periodLatency = start-startTime) %>% # work out fixation latency from start of period.
select(subj,trial,period,startTime,start,end,dur,periodLatency,x:peak.vy) # reorder the columns
allEGData <- rbind(allEGData, subData) # combine EG data with other subjects
allQuality <- rbind(allQuality, subQuality) # combine data quality data with other subjects
curFile <- subFiles[str_detect(subFiles,pattern="trial")] # detect trial data file (i.e., trial events, responses)
respData <- read_csv(curFile, col_types = cols(X3 = col_character()), col_names = FALSE) # read the data from csv
respData$X1 <- subNum # replace the subNum column with the full subject number from the file name
allResponseData <- rbind(allResponseData,respData) # combine with the other subjects
}
# rename variables in response data, recode sex variable values for consistency
colnames(allResponseData) <- c("subj","age","sex","trial","cue","resp","out","numResp","RT")
allResponseData$sex <- recode(allResponseData$sex, 'f' = "F", 'm' = "M")
outFileName <- str_c("Exp_", Experiment, "_data.RData")
save(list=c("allEGData", "allResponseData", "allQuality"), file=outFileName) # save RData file containing 3 main dataframes
rm(list=ls())
library(tidyverse)
load("Exp_3_data_Experimental.RData")
# Define AOIs
cue_AOI_dimensions = c(235,780,1685,1030)
resp_AOI_dimensions = c(235,400,1685,650)
out_AOI_dimensions = c(235,50,1685,300)
checkXYinAOI <- function(x, y, dur, AOI) { # passes the function 3 variables: x,y,and AOI
return((x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4])*dur) #
}
# add columns to the EG data which state whether each fixation was in the defined AOIs
allEGData <- allEGData %>%
rowwise() %>%
mutate(AOI_cue = checkXYinAOI(x,y,dur,cue_AOI_dimensions),
AOI_resp = checkXYinAOI(x,y,dur,resp_AOI_dimensions),
AOI_out = checkXYinAOI(x,y,dur,out_AOI_dimensions)) %>%
ungroup()
# summarise AOI time and nFix per period at the trial level
trialEG <- allEGData %>%
group_by(subj,trial,period) %>%
summarise(AOI_cue = sum(AOI_cue),
AOI_resp = sum(AOI_resp),
AOI_out = sum(AOI_out),
nFix = n()) %>% # number of fixations per period
pivot_wider(names_from = period, values_from = AOI_cue:nFix) %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# summarise time of first AOI_out fixation during feedback, at the trial level
first_out_fix <- allEGData %>%
filter(period == 2, AOI_out > 0) %>%
group_by(subj,trial) %>%
slice(1) %>%
summarise(time = periodLatency) %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# combine the two EG arrays with the response data
combinedData <- allResponseData %>%
left_join(trialEG, by = c("subj", "trial")) %>%
mutate(tOutFix = first_out_fix$time)
rm(list=ls())
library(tidyverse)
load("Exp_3_data.RData")
# Define AOIs
cue_AOI_dimensions = c(235,780,1685,1030)
resp_AOI_dimensions = c(235,400,1685,650)
out_AOI_dimensions = c(235,50,1685,300)
checkXYinAOI <- function(x, y, dur, AOI) { # passes the function 3 variables: x,y,and AOI
return((x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4])*dur) #
}
# add columns to the EG data which state whether each fixation was in the defined AOIs
allEGData <- allEGData %>%
rowwise() %>%
mutate(AOI_cue = checkXYinAOI(x,y,dur,cue_AOI_dimensions),
AOI_resp = checkXYinAOI(x,y,dur,resp_AOI_dimensions),
AOI_out = checkXYinAOI(x,y,dur,out_AOI_dimensions)) %>%
ungroup()
# summarise AOI time and nFix per period at the trial level
trialEG <- allEGData %>%
group_by(subj,trial,period) %>%
summarise(AOI_cue = sum(AOI_cue),
AOI_resp = sum(AOI_resp),
AOI_out = sum(AOI_out),
nFix = n()) %>% # number of fixations per period
pivot_wider(names_from = period, values_from = AOI_cue:nFix) %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# summarise time of first AOI_out fixation during feedback, at the trial level
first_out_fix <- allEGData %>%
filter(period == 2, AOI_out > 0) %>%
group_by(subj,trial) %>%
slice(1) %>%
summarise(time = periodLatency) %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# combine the two EG arrays with the response data
combinedData <- allResponseData %>%
left_join(trialEG, by = c("subj", "trial")) %>%
mutate(tOutFix = first_out_fix$time)
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 3 analysis/2_addAOI_combineResp_Exp3.R', echo=TRUE)
rm(list=ls())
library(tidyverse)
load("Exp_3_data.RData")
# Define AOIs
cue_AOI_dimensions = c(235,780,1685,1030)
resp_AOI_dimensions = c(235,400,1685,650)
out_AOI_dimensions = c(235,50,1685,300)
checkXYinAOI <- function(x, y, dur, AOI) { # passes the function 3 variables: x,y,and AOI
return((x>=AOI[1] & y>=AOI[2] & x<=AOI[3] & y<=AOI[4])*dur) #
}
# add columns to the EG data which state whether each fixation was in the defined AOIs
allEGData <- allEGData %>%
rowwise() %>%
mutate(AOI_cue = checkXYinAOI(x,y,dur,cue_AOI_dimensions),
AOI_resp = checkXYinAOI(x,y,dur,resp_AOI_dimensions),
AOI_out = checkXYinAOI(x,y,dur,out_AOI_dimensions)) %>%
ungroup()
# summarise AOI time and nFix per period at the trial level
trialEG <- allEGData %>%
group_by(subj,trial,period) %>%
summarise(AOI_cue = sum(AOI_cue),
AOI_resp = sum(AOI_resp),
AOI_out = sum(AOI_out),
nFix = n()) %>% # number of fixations per period
pivot_wider(names_from = period, values_from = AOI_cue:nFix) %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# summarise time of first AOI_out fixation during feedback, at the trial level
first_out_fix <- allEGData %>%
filter(period == 2, AOI_out > 0) %>%
group_by(subj,trial) %>%
slice(1) %>%
summarise(time = periodLatency) %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
# combine the two EG arrays with the response data
combinedData <- allResponseData %>%
left_join(trialEG, by = c("subj", "trial")) %>%
mutate(tOutFix = first_out_fix$time)
finalData <- combinedData %>%
mutate(phase = ceiling(trial/24),block=ceiling(trial/4)) %>%
select(subj:sex,phase,block,trial:AOI_out_2, tOutFix, nFix_1, nFix_2)
allQuality
allQuality %>%
pivot_wider(names_from = period, values_from = samples:post_interp_NA)
allQuality %>%
pivot_wider(names_from = period, values_from = samples:post_interp_NA, names_prefix = "p")
# summarise AOI time and nFix per period at the trial level
trialEG <- allEGData %>%
group_by(subj,trial,period) %>%
summarise(AOI_cue = sum(AOI_cue),
AOI_resp = sum(AOI_resp),
AOI_out = sum(AOI_out),
nFix = n()) %>% # number of fixations per period
pivot_wider(names_from = period, values_from = AOI_cue:nFix, names_prefix = "p") %>%
ungroup() %>%
# next line fills in missing trial numbers.
# N.B. it assumes all trial numbers (1:72) are present in the set
complete(subj,trial) %>%
arrange(subj,trial)
trialEG
allQuality %>%
pivot_wider(names_from = period, values_from = samples:post_interp_NA, names_prefix = "p")
source('D:/OneDrive - Lancaster University/Desktop PC/Projects/Psychopathy/Exp 3 analysis/2_addAOI_combineResp_Exp3.R', echo=TRUE)
